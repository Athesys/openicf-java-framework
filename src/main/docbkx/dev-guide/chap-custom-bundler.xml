<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START!
! This work is licensed under the Creative Commons
! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
! To view a copy of this license, visit
! http://creativecommons.org/licenses/by-nc-nd/3.0/
! or send a letter to Creative Commons, 444 Castro Street,
! Suite 900, Mountain View, California, 94041, USA.
!
! You can also obtain a copy of the license at
! legal/CC-BY-NC-ND.txt.
! See the License for the specific language governing permissions
! and limitations under the License.
!
! If applicable, add the following below this CCPL HEADER, with the fields
! enclosed by brackets "[]" replaced with your own identifying information:
!      Portions Copyright [yyyy] [name of copyright owner]
!
! CCPL HEADER END
!
!      Copyright 2011-2015 ForgeRock AS
!
-->
<chapter xml:id='chap-custom-bundler'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
  http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Building Connectors With the Custom Scripted Connector Bundler</title>

 <para>
  OpenIDM ${openidmVersion} provides a utility that facilitates the creation,
  packaging and distribution of custom connectors based on the Groovy Connector
  Toolkit.
 </para>
 <para>
  The Custom Scripted Connector Bundler enables you to create connectors using
  one of the default implementations described in <link xlink:show="new"
  xlink:href="dev-guide#groovy-connector-types"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Selecting a
  Scripted Connector Implementation</citetitle></link>. The utility takes a JSON
  configuration file as an argument, and produces all the required source code
  to build an OSGi-compatible <filename>jar</filename> file that can be used in
  any OpenICF-compliant project, such as OpenIDM.
 </para>
 <para>
  The Connector Bundler generates a connector template that includes
  placeholders for meta-data, a structure for scripts, and a Maven project
  (<filename>pom.xml</filename>) file to instruct Maven how to build the
  connector JAR. To be able to use the connector in a deployment, you must
  populate the generated Groovy templates with code that is appropriate to the
  resource that your connector is accessing. The generated templates include
  notes and, where appropriate, "starter code" to help you develop your scripts.
 </para>
 <para>
  OpenIDM ${openidmVersion} also provides a sample that shows how the connector
  bundler is used to create a scripted SQL connector. For more information, see
  <link xlink:show="new"
  xlink:href="http://openidm.forgerock.org/doc/bootstrap/install-guide/index.html#more-sample3"
  ><citetitle>Sample 3 - Using the Groovy Connector Toolkit to Connect to MySQL
  With ScriptedSQL</citetitle></link> in the <citetitle>OpenIDM Installation
  Guide</citetitle>.
 </para>

 <section xml:id="using-connector-bundler">
  <title>Using the Connector Bundler</title>
  <para>
   The Connector Bundler is provided as a JAR file in the OpenIDM delivery. To
   use the utility, download and extract OpenIDM, as described in
   <link xlink:show="new"
   xlink:href="http://openidm.forgerock.org/doc/bootstrap/install-guide/index.html#installing-openidm"
   ><citetitle>Installing and Running OpenIDM</citetitle></link>, then follow
   these steps:
  </para>
  <procedure>
   <step>
    <para>
     Navigate to the <literal>tools</literal> directory in your OpenIDM
     installation.
    </para>
    <screen>$ <userinput>cd /path/to/openidm/tools</userinput></screen>
   </step>
   <step>
    <para>
     The Connector Bundler takes a JSON configuration file as an argument. The
     configuration file includes the connector name and version, a description
     of the connector, the author, and any properties and object types that must
     be supported by the connector.
    </para>
    <para>
     To display a sample JSON configuration file, run the following command:
    </para>
    <screen>$ <userinput>java -jar custom-scripted-connector-bundler-${openidmVersion}.jar -h</userinput>
<computeroutput>Custom Scripted Connector Bundler for OpenIDM ${openidmVersion}
usage: bundle [OPTIONS] -c &lt;FILE>
 -c,--config &lt;file>   bundle configuration file for this connector
 -h,--help            print this help
 -v,--verbose         print the configuration file post-interpretation
Configuration format:
{
  "packageName" : "MyConnector",
  "displayName" : "My Connector",
  "description" : "This is my super awesome connector",
  "version" : "1.0",
  "author" : "Coder McLightningfingers",
  "providedProperties" : [ {
    "name" : "provided1",
    "value" : "default",
    "type" : "string"
  }, {
    "name" : "provided2",
    "value" : 2,
    "type" : "integer"
  } ],
  "properties" : [ {
    "order" : 0,
    "type" : "string",
    "name" : "FirstProperty",
    "value" : "firstValue",
    "required" : true,
    "confidential" : false,
    "displayMessage" : "This is my first property",
    "helpMessage" : "This should be a String value",
    "group" : "default"
  }, {
    "order" : 1,
    "type" : "double",
    "name" : "SecondProperty",
    "value" : 1.234,
    "required" : false,
    "confidential" : false,
    "displayMessage" : "This is my second property",
    "helpMessage" : "This should be a Double value",
    "group" : "default"
  } ],
  "objectTypes" : [ ],
  "baseConnectorType" : "GROOVY"
}</computeroutput></screen>
   </step>
   <step>
    <para>
     Use the sample configuration file as a starting point for writing your own
     configuration file to describe your connector bundle.
    </para>
    <para>
     This example assumes that you are writing a connector for an SQL database
     named ExampleDB.
    </para>
    <variablelist>
     <para>
      Set the following properties in the configuration file:
     </para>
     <varlistentry>
      <term>"packageName"</term>
      <listitem>
       <para>
        The name of the connector package.
       </para>
       <para>
        For this example, the <literal>packageName</literal> is
        <literal>ExampleDB</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"displayName"</term>
      <listitem>
       <para>
        The name of the connector.
       </para>
       <para>
        For this example, the <literal>displayName</literal> is
        <literal>ExampleDB Connector</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"description"</term>
      <listitem>
       <para>
        Any string that describes your custom connector.
       </para>
       <para>
        For this example, the <literal>description</literal> is <literal>An SQL
        connector that connects to the ExampleDB database</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"version"</term>
      <listitem>
       <para>
        The version number of the connector. Set this to a string that you
        update incrementally, as you develop/publish your connector.
       </para>
       <para>
        For this example, the <literal>version</literal> is
        <literal>1.0</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"author"</term>
      <listitem>
       <para>
        The author of the connector.
       </para>
       <para>
        For this example, the <literal>author</literal> is
        <literal>Babs Jensen</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"baseConnectorType"</term>
      <listitem>
       <para>
        The type of scripted connector that you are creating. The connector
        type can be one of the following:
       </para>
       <simplelist>
        <member>
         <literal>GROOVY</literal> - a non-pooled Groovy connector
        </member>
        <member>
         <literal>POOLABLEGROOVY</literal> - a poolable Groovy connector
        </member>
        <member>
         <literal>CREST</literal> - a connector based on the ForgeRock Commons
         REST (CREST) API. The connector takes a schema configuration file to
         define the attribute mapping from the OpenICF connector object to the
         CREST resource.
        </member>
        <member>
         <literal>REST</literal> -  a scripted REST connector that enables you
         to connect to any resource over HTTP/REST. The connector creates the
         HTTP/REST context (specifying the content type, authentication mode,
         encoding, and so on), and manages the connection. The connector relies
         on the Groovy scripting language and its RESTClient package.
        </member>
        <member>
         <literal>SQL</literal> - a scripted SQL connector that uses Groovy
         scripts to interact with a JDBC database.
        </member>
       </simplelist>
       <para>
        For this example, the <literal>baseConnectorType</literal> is
        <literal>SQL</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"providedProperties"</term>
      <listitem>
       <para>
        These properties are provided by the base configuration class for your
        connector. For example, if you choose <literal>SQL</literal> as the
        <literal>baseConnectorType</literal>, the base configuration class for
        the connector is <literal>ScriptedSQLConfiguration</literal>. This base
        class provides several properties, such as <literal>"username"</literal>,
        and <literal>"password"</literal>, by default. You do not need to define
        these properties, but you must provide a default value for them if you
        want them to appear in the provisioner configuration file. To specify a
        default value, you add them as <literal>"providedProperties"</literal>
        in this configuration file.
       </para>
       <para>
        For a list of the properties that are provided by the base configuration
        class, see the <link xlink:show="new"
        xlink:href="http://openicf.forgerock.org/doc/config-reference/index/groovy-connector-ref.html">Groovy
        Connector Reference</link> documentation.
       </para>
       <para>
        This example, sets the following properties: <!--TODO -->.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"properties"</term>
      <listitem>
       <para>
        These properties include any custom properties that your connector must
        support (properties that are not provided by the base configuration
        class). Define the following attributes for each custom property that
        you add here:
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <literal>"order"</literal> (integer) -  the order in which this
          property is displayed. The property with the value
          <literal>0</literal> is displayed first, then the property with the
          value <literal>1</literal>, and so on.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"type"</literal> (string) - the data type of the property,
          for example, <literal>string</literal>, <literal>int</literal> or
          <literal>boolean</literal>.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"name"</literal> (string) - the name of the property.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"value"</literal> - the default value of the property, if
          any. The format depends on the <literal>"type"</literal> specified.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"required"</literal> (boolean) - <literal>true</literal> if
          this property is required, <literal>false</literal> if it is optional.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"confidential"</literal> (boolean) - Specifies whether the
          property is confidential, and whether its value should be encrypted
          by the application when persisted.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"displayMessage"</literal> (string) - Optional text message
          that is written to the <literal>Messages.properties</literal> resource
          bundle. These messages can be used by a UI.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"helpMessage"</literal> (boolean) - Optional help message
          that is written to the <literal>Messages.properties</literal> resource
          bundle. These messages can be used by a UI.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"group"</literal> (string) - Optional string that enables you
          to categorize properties into groups.
         </para>
        </listitem>
       </itemizedlist>
       <para>
        This example, sets the following custom properties: <!--TODO -->.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>"objectTypes"</term>
      <listitem>
       <para>
        The object types that the connector will manage. If your application
        includes a mechanism that can populate this list (such as a schema
        script in OpenIDM), you do not need to define the object types at this
        stage. The list is converted directly to the
        <literal>"objectTypes"</literal> list in the provisioner configuration
        file.
       </para>
       <para>
        Each object type definition must have the following properties:
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <literal>"name"</literal> (string) - the name of the object type.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"id"</literal> (string) - the unique ID of the object type,
          for example, <literal>__GROUP__</literal>.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"type"</literal> - the JSON schema type of the object, as
          defined in the <link xlink:show="new"
                               xlink:href="https://tools.ietf.org/html/draft-zyp-json-schema-04">JSON
          Schema Internet Draft</link>.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"nativeType"</literal> - the data type of the object that is
          expected by the OpenICF API. The <literal>ConnectorUtil</literal>
          class includes a utility to convert the <literal>"type"</literal> to
          the <literal>"nativeType"</literal>.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"objectClass"</literal> - can be one of the following:
         </para>
         <simplelist>
          <member>ObjectClass.ACCOUNT</member>
          <member>ObjectClass.GROUP</member>
          <member>ObjectClass.ALL</member>
          <member>Any arbitrary string. Although the bundler will accept an
           arbitrary string, you might need to edit the resulting provisioner
           file and Groovy scripts to work with the arbitrary string.
          </member>
         </simplelist>
        </listitem>
       </itemizedlist>
       <para>
        This example defines an <literal>account</literal> and a
        <literal>group</literal> object class.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     The complete configuration file for the ExampleDB connector follows:
    </para>
    <programlisting language="javascript">{
  "packageName": "ExampleDB",
  "displayName": "ExampleDB Connector",
  "description": "Connector for the ExampleDB database",
  "version": "1.0",
  "author": "Babs Jensen",
  "baseConnectorType": "SQL",
  "providedProperties": [
    {
      "name": "username",
      "value": "changeme",
      "type": "string"
    },
    {
      "name": "password",
      "value": "changeme",
      "type": "string"
    },
    {
      "name": "fullName",
      "value": "myfullname",
      "type": "string"
    },
    {
      "name": "lastName",
      "value": "mylastname",
      "type": "string"
    },
    {
      "name": "organization",
      "value": "myorg",
      "type": "string"
    }
  ],
  "properties": [
    {
      "order": 0,
      "type": "String",
      "name": "Name",
      "value": "firstValue",
      "required": true,
      "confidential": false,
      "displayMessage": "This is my first property",
      "helpMessage": "This should be a String value",
      "group": "default"
    },
    {
      "order": 1,
      "type": "Double",
      "name": "SecondProperty",
      "value": 1.234,
      "required": false,
      "confidential": false,
      "displayMessage": "This is my second property",
      "helpMessage": "This should be a Double value",
      "group": "default"
    }
  ],
  "objectTypes": [
    {
      "name": "group",
      "id": "__GROUP__",
      "type": "object",
      "nativeType": "__GROUP__",
      "objectClass": "ObjectClass.GROUP",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "nativeName": "__NAME__",
          "nativeType": "string"
        },
        {
          "name": "gid",
          "type": "string",
          "required": true,
          "nativeName": "gid",
          "nativeType": "string"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "nativeName": "description",
          "nativeType": "string"
        },
        {
          "name": "users",
          "type": "array",
          "nativeName": "users",
          "nativeType": "object",
          "items": [
            {
              "type": "object",
              "properties": [
                {
                  "name": "uid",
                  "type": "string"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "account",
      "id": "__ACCOUNT__",
      "type": "object",
      "nativeType": "__ACCOUNT__",
      "objectClass": "ObjectClass.ACCOUNT",
      "properties": [
        {
          "name": "firstName",
          "type": "string",
          "nativeName": "firstname",
          "nativeType": "string",
          "required": true
        },
        {
          "name": "email",
          "type": "string",
          "nativeName": "email",
          "nativeType": "string"
        },
        {
          "name": "password",
          "type": "string",
          "nativeName": "password",
          "nativeType": "string",
          "flags": [
            "NOT_READABLE",
            "NOT_RETURNED_BY_DEFAULT"
          ]
        },
        {
          "name": "uid",
          "type": "string",
          "nativeName": "__NAME__",
          "required": true,
          "nativeType": "string"
        },
        {
          "name": "fullName",
          "type": "string",
          "nativeName": "fullname",
          "nativeType": "string"
        },
        {
          "name": "lastName",
          "type": "string",
          "required": true,
          "nativeName": "lastname",
          "nativeType": "string"
        }
      ]
    }
  ]
}    </programlisting>
   </step>
   <step>
    <para>
     Save your customised connector configuration file as a JSON file, in a
     clean directory, for example:
    </para>
    <screen>$ <userinput>ls /path/to/openidm/ExampleDBconnector</userinput>
<computeroutput>ExampleDB.json</computeroutput></screen>
   </step>
   <step>
    <para>
     Run the Connector Bundler, providing the path to your connector
     configuration file:
    </para>
    <screen>$ <userinput>java -jar custom-scripted-connector-bundler-${openidmVersion}.jar \
 --config ../ExampleDBConnector/ExampleDB.json</userinput></screen>
    <para>
     This step generates a directory tree of source files that can be used to
     build your custom connector.
    </para>
   </step>
   <step>
    <para>
     Edit the Groovy script templates that are located in the
     <filename>src/main/resources/script/&lt;connectorname></filename>
     directory.
    </para>
    <para>
     These scripts must be enhanced with the code that will perform the
     operations on the resource. For more information, see <link
     xlink:show="new" xlink:href="dev-guide#implementing-operations-groovy"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Implementing
     OpenICF Operations With Groovy Scripts</citetitle></link>.
    </para>
   </step>
   <step>
    <para>
     When you have completed the scripts for all the operations that you want
     your connector to perform, build the custom connector as follows:
    </para>
    <screen>$ <userinput>mvn install</userinput></screen>
    <para>
     Building the connector produces an OSGi-compatible jar file in the
     <filename>./target</filename> directory. Copy this jar file to your
     OpenICF-compatible project or distribute it for others to use.
    </para>
   </step>
   <step>
    <para>
     A provisioner configuration file named
     <filename>provisioner.openicf-<replaceable>connector-name</replaceable>.json</filename>
     is included in the jar file. You must extract the provisioner file to the
     filesystem because it cannot be detected and used directly from within the
     connector jar file.
    </para>
    <para>
     Extract the provisioner configuration file as follows:
    </para>
    <screen>$ <userinput>jar -xvf <replaceable>connector-name</replaceable>.jar conf/provisioner.openicf-<replaceable>connector-name</replaceable>.json</userinput></screen>
   </step>
   <step>
    <para>
     The connector jar includes all the Groovy scripts (which are executed
     directly from the jar). Alternatively, you can extract the scripts to the
     filesystem and run them from there. To do so, change the path to the
     scripts in the extracted provisioner configuration file as follows:
    </para>
    <para>
     Change:
    </para>
    <programlisting language="javascript">"scriptRoots" : [
    "jar:file:&amp;{launcher.install.location}/connectors/awesome-connector-1.0.jar!/script/awesome/"
],
"classpath" : [
    "jar:file:&amp;{launcher.install.location}/connectors/awesome-connector-1.0.jar!/script/awesome/"
]   </programlisting>
    <para>
     to
    </para>
    <programlisting language="javascript">"scriptRoots" : [
    "file:&amp;{launcher.project.location}/&lt;your_extracted_script_location>/"
],
"classpath" : [
    "file:&amp;{launcher.project.location}/&lt;your_extracted_script_location>/"
],  </programlisting>
   </step>

  </procedure>

 </section>
</chapter>