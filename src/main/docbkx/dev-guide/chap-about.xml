<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2012-2015 ForgeRock AS
  !
-->
<chapter xml:id='chap-about'
 xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>About the OpenICF Framework and ICF Connectors</title>
 <para>
  The Open Identity Connector Framework (OpenICF) project provides
  interoperability between identity, compliance and risk management solutions.
  An OpenICF Connector enables provisioning software, such as OpenIDM, to manage
  the identities that are maintained by a specific identity provider.
 </para>
 <para>
  OpenICF connectors provide a consistent layer between identity applications
  and target resources, and expose a set of operations for the complete
  lifecycle of an identity. The connectors provide a way to decouple
  applications from the target resources to which data is provisioned.
 </para>
 <para>
  OpenICF focuses on provisioning and identity management, but also provides
  general purpose capabilities, including authentication, create, read, update,
  delete, search, scripting, and synchronization operations. Connector bundles
  rely on the OpenICF Framework, but applications remain completely separate
  from the connector bundles. This enables you to change and update connectors
  without changing your application or its dependencies.
 </para>
 <para>
  Many connectors have been built within the OpenICF framework, and are
  maintained and supported by ForgeRock and by the OpenICF community. However,
  you can also develop your own OpenICF connector, to address a requirement that
  is not covered by one of the existing connectors. In addition, OpenICF
  provides two <emphasis>scripted connector toolkits</emphasis>, that enable you
  to write your own connectors based on Groovy or PowerShell scripts.
 </para>
 <para>
  Version ${docTargetVersion} of the OpenICF framework can use OpenIDM, Sun
  Identity Manager, and Oracle Waveset connectors (version 1.1) and can use
  ConnID connectors up to version 1.4.
 </para>
 <itemizedlist>
  <para>
   This guide provides the following information:
  </para>
  <listitem>
   <para>
    An overview of the OpenICF framework and its components
   </para>
  </listitem>
  <listitem>
   <para>
    Information on how to use the OpenICF existing connectors in your
    application (both locally and remotely)
   </para>
  </listitem>
  <listitem>
   <para>
    Information on how to write your own Java and .NET connectors, scripted
    Groovy connectors, or scripted PowerShell connectors
   </para>
  </listitem>
 </itemizedlist>

 <section xml:id="openicf-architecture-overview">
  <title>Overview of the OpenICF Architecture</title>
  <para>
   OpenICF is situated between the identity management application and the
   target resource. The framework provides a generic layer between the
   application and the connector bundle that accesses the resource. The
   framework implements an API, that includes a defined set of operations. When
   you are building a connector, you implement the Service Provider Interface
   (SPI), and include only those operations that are supported by your target
   resource. Each connector implements a set of SPI operations. The
   API operations call the SPI operations that you implement.
  </para>
  <para>
   The following image shows a high-level overview of an OpenICF deployment.
  </para>
  <mediaobject>
   <alt>
    Image shows a high level architecture of the OpenICF Framework, indicating
    the relative locations of the API and SPI in the architecture.
   </alt>
   <imageobject>
    <imagedata fileref="images/openicf-arch.png" format="PNG" />
   </imageobject>
  </mediaobject>

  <section xml:id="framework-components">
  <title>Understanding the OpenICF Framework Components</title>
  <para>
   When you are building, or modifying, an identity management application to
   use the OpenICF Framework and its connectors, you use the following
   interfaces of the API:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Connector Info Manager Component
    </para>
    <para>
     The connector info manager maintains a set of connector info instances,
     each of which describes an available connector. The OpenICF Framework
     provides three different types of connector info manager:
    </para>
    <itemizedlist>
     <listitem>
      <para>Local</para>
      <para>
       A local connector info manager accesses the connector bundle or assembly
       directly.
      </para>
     </listitem>
     <listitem>
      <para>Remote</para>
      <para>
       A remote connector info manager accesses the connector bundle or assembly
       through a remote connector server.
      </para>
     </listitem>
     <listitem>
      <para>OSGi</para>
      <para>
       An OSGi connector info manager accesses the connector bundle within the
       OSGi context.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     For more information, see <link xlink:show="new"
     xlink:role="http://docbook.org/xlink/role/olink"
     xlink:href="dev-guide#create-connector-info-manager"><citetitle>Creating
     the Connector Info Manager</citetitle></link>.
    </para>
   </listitem>
   <listitem>
    <para>
     Connector Info Component
    </para>
    <para>
     The connector info component provides meta information (display name,
     category, messages, and so forth) for a given connector.
    </para>
   </listitem>
   <listitem>
    <para>
     Connector Key Component
    </para>
    <para>
     The connector key component uniquely identifies a specific connector
     implementation.
    </para>
   </listitem>
   <listitem>
    <para>
     API Configuration
    </para>
    <para>
     The API configuration holds the available configuration properties and
     values from both the API, and the SPI, based on the connector type.
    </para>
    <para>
     For more information, see <link xlink:show="new"
     xlink:role="http://docbook.org/xlink/role/olink"
     xlink:href="dev-guide#configuration-implementation"><citetitle>Implementing
     the Configuration Interface</citetitle></link>.
    </para>
   </listitem>
   <listitem>
    <para>
     Connector Facade Interface
    </para>
    <para>
     The connector facade is the main interface through which an application
     invokes connector operations. The connector facade represents a specific
     connector instance, that has been configured in a specific way. For more
     information, see <link xlink:show="new"
     xlink:href="dev-guide#create-connector-facade"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Creating a
     Connector Facade</citetitle></link>.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   When you are building a new connector, you implement the SPI, including the
   following interfaces:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The <literal>connector</literal> interface.
    </para>
    <para>
     The connector interface handles initialization and disposal of the
     connector, and determines whether the connector is poolable. For more
     information, see <link xlink:show="new" xlink:href="dev-guide#connector-implementation"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Implementing
     the Connector Interface</citetitle></link>
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>configuration</literal> interface.
    </para>
    <para>
     The configuration interface implementation includes all of the required
     information to enable the connector to connect to the target system, and
     to perform its operations. The configuration interface implements getters
     and setters for each of its defined properties. It also provides a validate
     method that determines whether all the required properties are available,
     and valid. For more information, see <link xlink:show="new"
     xlink:href="dev-guide#configuration-implementation"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Implementing
     the Configuration Interface</citetitle></link>.
    </para>
    <para>
     The OpenICF framework uses the configuration interface implementation to
     build the <emphasis>configuration properties</emphasis> inside the API
     configuration.
    </para>
    <para>
     When the configuration interface is implemented, it becomes available to
     the default API configuration.
    </para>
   </listitem>
   <listitem>
    <para>
     Any <literal>operations</literal> that the target resource can support,
     such as <literal>CreateOp</literal>, <literal>UpdateOp</literal>,
     <literal>DeleteOp</literal> and so forth. For more information, see
     <link xlink:show="new" xlink:href="dev-guide#operation-implementation"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Implementing
     the Operation Interfaces</citetitle></link>.
    </para>
   </listitem>
  </itemizedlist>
  </section>
 </section>

 <section xml:id="overview-remote-connectors">
  <title>Overview of a Remote Connector Implementation</title>
  <para>
   Connectors can run locally (on the same host as your application) or remotely
   (on a host that is remote to your application). Connectors that run remotely
   require a <firstterm>connector server</firstterm>, running on the same host
   as the connector. Applications access the connector implementation
   <emphasis>through</emphasis> the connector server.
  </para>
  <note>
   <para>
    The OpenICF framework can support both local and remote connector
    implementations simultaneously.
   </para>
  </note>
  <para>
   Connector servers also enable you to run connector bundles that are written
   in C# on a .NET platform, and to access them over the network from a Java or
   .NET application.
  </para>
  <para>
   The following image shows a high-level overview of an OpenICF deployment,
   including a remote connector server.
  </para>
  <mediaobject>
   <alt>
    Image shows a high level architecture of the OpenICF framework, including
    the location of remote connector servers.
   </alt>
   <imageobject>
    <imagedata fileref="images/openicf-arch-remote.png" format="PNG" />
   </imageobject>
  </mediaobject>
  <para>
   For more information about connector servers, and how to use them in your
   application, see <link xlink:show="new"
   xlink:href="dev-guide#chap-connector-servers"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Using OpenICF
   Connector Servers to Run Connectors Remotely</citetitle></link>.
  </para>
 </section>

 <section xml:id="openicf-functionality">
  <title>Overview of OpenICF Functionality</title>
  <itemizedlist>
   <para>
    OpenICF provides many capabilities, including the following:
   </para>
   <listitem>
    <para>Connector pooling</para>
   </listitem>
   <listitem>
    <para>Timeouts on all operations</para>
   </listitem>
   <listitem>
    <para>Search filtering</para>
   </listitem>
   <listitem>
    <para>Search and synchronization buffering and result streaming</para>
   </listitem>
   <listitem>
    <para>Scripting with Groovy, JavaScript, shell, and PowerShell</para>
   </listitem>
   <listitem>
    <para>Classloader isolation</para>
   </listitem>
   <listitem>
    <para>An independent logging API/SPI</para>
   </listitem>
   <listitem>
    <para>Java and .NET platform support</para>
   </listitem>
   <listitem>
    <para>Opt-in operations that support both simple and advanced
     implementations for the same CRUD operation</para>
   </listitem>
   <listitem>
    <para>A logging proxy that captures all API calls</para>
   </listitem>
   <listitem>
    <para>A Maven connector archetype to create connectors</para>
   </listitem>
  </itemizedlist>
 </section>

</chapter>
