<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2012-2015 ForgeRock AS
  !
-->
<chapter xml:id='chap-connector-servers'
 xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xi='http://www.w3.org/2001/XInclude'>
 <title>Using OpenICF Connector Servers to Run Connectors Remotely</title>

 <para>
  A <firstterm>Connector Server</firstterm> enables your application to run
  provisioning operations on a connector bundle that is deployed on a remote
  system. A key feature of connector servers is the ability to run connector
  bundles that are written in C# on a .NET platform, and to access them over the
  network from a Java application.
 </para>

 <itemizedlist>
  <para>
   Connector servers are available for both the Java and .NET platforms.
  </para>
  <listitem>
   <para>
    A .NET connector server allows Java applications to access C# connector
    bundles. You deploy the C# connector bundles on the .NET connector server.
    Your Java application can then communicate with the .NET connector server
    over the network. The .NET connector server acts as a proxy to provide
    authenticated access for Java applications to the C# connector bundles that
    are deployed within the connector server.
   </para>
  </listitem>
  <listitem>
   <para>
    A Java connector server allows you to execute a Java connector bundle in a
    different JVM from your application. You can also run a Java connector on a
    different host for performance reasons. You might choose to use a Java
    connector server with a Java remote connector server to avoid the
    possibility of crashing an application JVM, due to a fault in a JNI-based
    connector.
   </para>
  </listitem>
 </itemizedlist>

 <section xml:id="dotnet-connector-server">
  <title>Installing, Configuring and Running a .NET Connector Server</title>
  <para>
   The .NET connector server requires the .NET framework (version 4.5 or later)
   and is supported on Windows Server 2008 and 2008 R2.
  </para>
  <para>
   By default, the connector server outputs log messages to a file named
   <filename>connectorserver.log</filename>, in the installation directory. To
   change the location of the log file, set the
   <literal>initializeData</literal> parameter in the configuration file,
   <emphasis>before</emphasis> before you start the connector server. For
   example, the following excerpt sets the log directory to
   <filename>C:\openicf\logs\connectorserver.log</filename>.
  </para>
  <programlisting>&lt;add name="file"
     type="System.Diagnostics.TextWriterTraceListener"
     initializeData="C:\openicf\logs\connectorserver.log"
     traceOutputOptions="DateTime">
     &lt;filter type="System.Diagnostics.EventTypeFilter" initializeData="Information"/>
&lt;/add> </programlisting>
  <para>
   For more information about adjusting the logging parameters, see <link>Logging
   and Troubleshooting</link>.
  </para>

 <procedure xml:id="install-dotnet-connector-server">
  <title>Installing a .NET Connector Server</title>
   <step>
    <para>
     Download the OpenICF .NET Connector Server from the <link
     xlink:href="http://openicf.forgerock.org/downloads.html"
     xlink:show="new">OpenICF Downloads page</link>.
    </para>
    <para>
     The .NET Connector Server is distributed in two formats. The .msi file is a
     wizard that installs the Connector Server as a Windows Service. The .zip
     file is simply a bundle of all the files required to run the Connector
     Server.
    </para>
    <para>
     If you do not want to run the Connector Server as a Windows service,
     download and extract the .zip file, and move on to the next procedure,
     <xref linkend="configure-dotnet-connector-server" />. Otherwise, follow the
     steps in this section.
    </para>
   </step>
   <step>
    <para>
     Execute the openicf-zip--dotnet.msi installation file and complete the
     wizard.
    </para>
    <para>
     When the wizard has completed, the Connector Server is installed as a
     Windows Service.
    </para>
   </step>
  <step>
   <para>
    Open the Services console and make sure that the Connector Server is listed
    there.
   </para>
   <para>
    The name of the service is OpenICF Connector Server, by default.
   </para>
  </step>
 </procedure>

 <procedure xml:id="configure-dotnet-connector-server">
  <title>Configuring a .NET Connector Server</title>
  <para>
   After you have installed the .NET Connector Server, as described in the
   previous section, follow these steps to configure the Connector Server.
  </para>
   <step>
    <para>
     Make sure that the Connector Server is not currently running. If it is
     running, use the Services console to stop it.
    </para>
   </step>
   <step>
    <para>
     At the command prompt, change to the directory where the Connector Server
     was installed.
    </para>
    <screen>c:\> cd "c:\Program Files (x86)\Identity Connectors\Connector Server"</screen>
   </step>
   <step xml:id="key-step">
    <para>
     Run the <command>ConnectorServer /setkey</command> command to set a secret
     key for the Connector Server. The key can be any string value. This
     example sets the secret key to <literal>Passw0rd</literal>.
    </para>
    <screen><userinput>ConnectorServer /setkey Passw0rd</userinput>
<computeroutput>Key has been successfully updated.</computeroutput></screen>
    <para>
     This key is used by clients that connect to the Connector Server.
    </para>
   </step>
    <step>
     <para>
      Edit the Connector Server connection settings.
     </para>
     <para>
      The Connector Server configuration is saved in a file named
      <filename>ConnectorServer.exe.Config</filename> (in the directory in which
      the Connector Server is installed).
     </para>
     <para>
      Check and edit this file, as necessary, to reflect your installation. In
      particular, check the connection properties, under the
      <literal>&lt;appsettings&gt;</literal> item.
     </para>
     <screen>&lt;add key="connectorserver.port" value="8759" /&gt;
&lt;add key="connectorserver.usessl" value="false" /&gt;
&lt;add key="connectorserver.certificatestorename" value="ConnectorServerSSLCertificate" /&gt;
&lt;add key="connectorserver.ifaddress" value="0.0.0.0" /&gt;
&lt;add key="connectorserver.key" value="xOS4IeeE6eb/AhMbhxZEC37PgtE=" /&gt;
     </screen>
     <variablelist>
      <para>
       The following connection properties are set by default.
      </para>
      <varlistentry>
       <term><literal>connectorserver.port</literal></term>
       <listitem>
        <para>
         Specifies the port on which the Connector Server listens.
        </para>
        <note>
         <para>
          If Windows firewall is enabled, you must create an inbound port rule
          to open the TCP port for the connector server (8759 by default). If
          you do not open the TCP port, OpenIDM will be unable to contact the
          Connector Server. For more information, see the Microsoft
          documentation on
          <link xlink:show="new"
          xlink:href="http://technet.microsoft.com/en-us/library/cc947814(v=ws.10).aspx"
          >creating an inbound port rule</link>.
         </para>
        </note>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>connectorserver.usessl</literal></term>
       <listitem>
        <para>
         Indicates whether client connections to the Connector Server should be
         over SSL.
        </para>
        <warning>
         <para>
          This property is set to <literal>false</literal> by default. In
          production environments you must set this property to
          <literal>true</literal> for security reasons, otherwise all messages
          going over the network are obfuscated rather than encrypted.
         </para>
        </warning>
        <para>
         To secure connections to the Connector Server, set this property to
         <literal>true</literal> and store the server certificate in your
         certificate store, using the following command:
        </para>
        <screen width="105">
ConnectorServer /storeCertificate /storeName &lt;certificate-store-name&gt; /certificateFile &lt;certificate&gt;</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>connectorserver.certificatestorename</literal></term>
       <listitem>
        <para>
         Specifies the name of the certificate store, into which your server
         certificate has been installed.
        </para>
        <para>
         This parameter is optional. If you do not set it, the default
         certificate store name is <literal>ConnectorServerSSLCertificate</literal>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>connectorserver.ifaddress</literal></term>
       <listitem>
        <para>
         Specifies a single IP address from which connections will be accepted.
        </para>
        <para>
         If you set a value here (other than the default
         <literal>0.0.0.0</literal>) connections from all IP addresses other
         than the one specified are denied.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <itemizedlist>
      <para>
       Record the following information for use when your application connects
       to the Connector Server.
      </para>
      <listitem>
       <para>Host name or IP address</para>
      </listitem>
      <listitem>
       <para>Connector server port</para>
      </listitem>
      <listitem>
       <para>Connector server key</para>
      </listitem>
      <listitem>
       <para>Whether SSL is enabled</para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Check the trace settings, in the same configuration file, under the
      <literal>&lt;system.diagnostics&gt;</literal> item.
     </para>
     <screen>&lt;system.diagnostics&gt;
  &lt;trace autoflush="true" indentsize="4"&gt;
    &lt;listeners&gt;
      &lt;remove name="Default" /&gt;
      &lt;add
          name="myListener"
          type="System.Diagnostics.TextWriterTraceListener"
          initializeData="c:\connectorserver.log"
          traceOutputOptions="DateTime"&gt;
          &lt;filter
            type="System.Diagnostics.EventTypeFilter"
            initializeData="Information" /&gt;
      &lt;/add&gt;
    &lt;/listeners&gt;
  &lt;/trace&gt;
&lt;/system.diagnostics&gt;
     </screen>
     <para>
      The Connector Server uses the standard .NET trace mechanism. For more
      information about tracing options, see <link xlink:show="new"
      xlink:href="http://msdn.microsoft.com/en-us/library/15t15zda(v=vs.71).aspx"
      >Microsoft's .NET documentation</link> for
      <literal>System.Diagnostics</literal>.
     </para>
     <para>
      The default trace settings are a good starting point. For less tracing,
      you can change the EventTypeFilter's initializeData to "Warning" or
      "Error". For very verbose logging you can set the value to "Verbose" or
      "All". The level of logging performed has a direct effect on the
      performance of the Connector Servers, so take care when setting this
      level.
     </para>
     <para>
      For more information on adjusting the logging and trace settings, see
      <link>Logging and Troubleshooting</link>.
     </para>
    </step>
  </procedure>

  <procedure xml:id="net-connector-start">
   <title>Starting the .NET Connector Server</title>
   <para>
    Start the .NET Connector Server in one of the following ways.
   </para>
   <step>
    <para>
     Start the server as a Windows service, by using the Microsoft Services
     Console (<filename>services.msc</filename>).
    </para>
    <para>
     Locate the connector server service
     (<literal>OpenICF Connector Server</literal>), and click <literal>Start
     the service</literal> or <literal>Restart the service</literal>.
    </para>
    <para>
     The service is executed with the credentials of the service user
     (<literal>System</literal>, by default). In production mode, you must
     change this to a user with more restrictions.
    </para>
   </step>
   <step>
    <para>
     Start the server as a Windows service, by using the command line.
    </para>
    <para>
     In the Windows Command Prompt, run the following command:
    </para>
    <screen>net start ConnectorServerService</screen>
    <para>
     To stop the service in this manner, run the following command:
    </para>
    <screen>net stop ConnectorServerService</screen>
   </step>
   <step>
    <para>
     Start the server without using Windows services. In most cases, you should
     run the Connector Server as a Windows service, but you can run the
     Connector Server manually, as follows.
    </para>
    <para>
     In the Windows Command Prompt, change directory to the location where the
     Connector Server was installed. The default location is
     <literal>c:\Program Files (x86)\Identity Connectors\Connector Server</literal>.
    </para>
    <para>
     Start the server with the following command:
    </para>
    <screen>ConnectorServer.exe /run</screen>
    <para>
     Note that this command starts the Connector Server with the credentials of
     the current user. It does not start the server as a Windows service.
    </para>
   </step>
  </procedure>

  <procedure xml:id="install-connectors-dotnet">
   <title>Installing Connectors on a .NET Connector Server</title>
   <para>
    When your .NET Connector Server is up and running, you must install the
    individual connector assemblies that will run on the Connector Server. This
    section assumes that your connector assemblies are available as .zip files,
    either downloaded from the <link>ForgeRock Resources Catalog</link>, or
    packaged after their development.
   </para>
   <step>
    <para>
     Change to the directory where you installed the connector server.
    </para>
   </step>
   <step>
    <para>
     Unzip the connector .zip file.
    </para>
    <para>
     The .NET connector server scans the install directory for files named
     <literal>*.Connector.dll</literal> or <literal>*.Connector-*.dll</literal>.
    </para>
   </step>
   <step>
    <para>
     Restart the connector server.
    </para>
   </step>
  </procedure>

  <procedure xml:id="run-multiple-dotnet-connector-servers">
   <title>Running Multiple .NET Connector Servers</title>
   <para>
    In some situations, you might want run multiple .NET connector servers on
    the same host. For example, you might want to run a service with different
    privileges, or multiple connectors that you are using might be incompatible
    when run in the same application.
   </para>
   <para>
     To run multiple connector servers on the same host, adhere to the following
     steps:
   </para>
   <step>
    <para>
     Unpack the connector server binaries into different directories
    </para>
   </step>
   <step>
    <para>
     Use different port numbers for each server
    </para>
   </step>
   <step>
    <para>
     Use different trace files for each server
    </para>
   </step>
  </procedure>
  <para>
   Each Connector Server can run interactively, or as a Windows Service - they
   do not need to be run in the same way.
  </para>
 </section>

 <section xml:id="java-connector-server">
  <title>Installing, Configuring and Running a Remote Java Connector Server</title>
  <para>
   In certain situations, it might be necessary to set up a remote Java
   Connector Server, rather than run your Java connectors locally. This section
   provides instructions for setting up a remote Java Connector Server on
   Unix/Linux and Windows.
  </para>

  <procedure xml:id="install-java-connector-server">
   <title>Installing the Java Connector Server</title>
   <step>
    <para>
     Download and extract the OpenICF Java Connector Server .zip file from the
     <link>ForgeRock Downloads</link> page.
    </para>
   </step>
   <step>
    <para>
     Start the Java Connector Server from the install directory.
    </para>
    <screen>$ <userinput>/<replaceable>install-dir</replaceable>/bin/ConnectorServer.sh</userinput>
<computeroutput>
 Usage: ConnectorServer &lt;command> [option], where command is one of the following:
 /run ["-J&lt;java option>"] - Runs the server from the console.
 /setKey [&lt;key>] - Sets the connector server key.
 /setDefaults - Sets the default ConnectorServer.properties.

 example:
 ConnectorServer.sh /run "-J-Djavax.net.ssl.keyStore=mykeystore.jks" "-J-Djavax.net.ssl.keyStorePassword=changeit"
 - this will run connector server with SSL

 ConnectorServer.sh jpda /run
 - this will run connector server in debug mode</computeroutput></screen>
    <para>
     Your Java Connector Server is now up and running.
    </para>
   </step>
  </procedure>

  <procedure>
   <title>Starting the Java Connector Server as a Service</title>
   <step>
   <para>
    For information on starting the Java Connector Server as a Linux service,
    see <link xlink:show="new"
    xlink:href="http://openidm.forgerock.org/doc/bootstrap/integrators-guide/#java-connector-server-linux">
    <citetitle>Installing a Remote Java Connector Server for Unix/Linux</citetitle>
    in the <citetitle>OpenIDM Integrator's Guide</citetitle></link>.
   </para>
   </step>
   <step>
    <para>
     For information on starting the Java Connector Server as a Windows service,
     see <link xlink:show="new"
     xlink:href="http://openidm.forgerock.org/doc/bootstrap/integrators-guide/#java-connector-server-windows">
     <citetitle>Installing a Remote Java Connector Server for Windows</citetitle>
     in the <citetitle>OpenIDM Integrator's Guide</citetitle></link>.
    </para>
   </step>
  </procedure>

  <procedure xml:id="configure-java-connector-server">
   <title>Configuring the Java Connector Server</title>
   <para>
    The Java Connector Server uses a <literal>key</literal> property to
    authenticate the connection. The default key value is
    <literal>changeit</literal>.
   </para>
   <step>
    <para>
     To change the value of the secret key, run the Connector Server with the
     <option>-setKey</option> option. The following example sets the key value
     to <literal>Passw0rd</literal>:
    </para>
    <screen><userinput>$ cd /path/to/jconnsrv
$ java \
 -cp "./lib/framework/*" \
 org.identityconnectors.framework.server.Main \
 -setKey
 -key Passw0rd
 -properties ./conf/ConnectorServer.properties</userinput></screen>
   </step>
   <step>
    <para>
     Review the <filename>ConnectorServer.properties</filename> file in the
     <filename>./conf</filename> directory, and make any required changes. By
     default, the configuration file has the following properties:
    </para>
    <programlisting language="ini">connectorserver.port=8759
connectorserver.bundleDir=bundles
connectorserver.libDir=lib
connectorserver.usessl=false
connectorserver.loggerClass=org.forgerock.openicf.common.logging.slf4j.SLF4JLog
connectorserver.key=xOS4IeeE6eb/AhMbhxZEC37PgtE\=</programlisting>
    <variablelist>
     <varlistentry>
      <term><literal>connectorserver.port</literal></term>
      <listitem>
       <para>
        The port number to listen on
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>connectorserver.bundleDir</literal></term>
      <listitem>
       <para>
        The installation directory of the connectors. The path is relative to
        the connector server installation directory, and is
        <literal>bundles</literal> by default.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>connectorserver.libDir</literal></term>
      <listitem>
       <para>
        The directory in which runtime libraries that are required by the
        connectors are located. The default directory is <literal>lib</literal>.
       </para>
       <para>
        The runtime libraries directory enables you to prevent library conflicts,
        by using Java classloader isolation.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>connectorserver.usessl</literal></term>
      <listitem>
       <para>
        Indicates whether client connections to the connector server should be
        over SSL. This property is set to <literal>false</literal> by default.
        You must set it to <literal>true</literal> in production environments.
       </para>
       <para>
        To secure connections to the connector server, set this property to
        <literal>true</literal> and set the following system config properties
        (on the command line) before you start the connector server:
       </para>
       <screen>-Djavax.net.ssl.keyStore=mySrvKeystore
-Djavax.net.ssl.keyStoreType (optional)
-Djavax.net.ssl.keyStorePassword</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>connectorserver.loggerClass</literal></term>
      <listitem>
       <para>
        Specifies the logging implementation.
       </para>
       <para>
        OpenICF use its own logging API. The default implementation is to log
        everything to the console with
        (<literal>org.identityconnectors.common.logging.StdOutLogger</literal>).
        This implementation is fine in a development environment.
       </para>
       <para>
        In production environments, you should use either the JDK
        (<literal>org.identityconnectors.common.logging.impl.JDKLogger</literal>)
        or the Simple Logging Facade for Java (SLF4J)
        (<literal>org.forgerock.openicf.common.logging.slf4j.SLF4JLog</literal>)
        implementations. For more information, see the Javadoc for the
        <link xlink:show="new"
        xlink:href="http://openicf.forgerock.org/apidocs/org/identityconnectors/common/logging/impl/JDKLogger.html">JDK Logger</link>
        and the <link xlink:show="new"
        xlink:href="http://openicf.forgerock.org/apidocs/org/forgerock/openicf/common/logging/slf4j/SLF4JLog.html">SLF4J</link>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>connectorserver.key</literal></term>
      <listitem>
       <para>
        Provides a secure hash of the connector server key. You can set this key
        by using the <literal>-setkey</literal> flag, as described previously.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>connectorserver.ifaddress</literal></term>
      <listitem>
       <para>
        This optional parameter enables you to specifies a single IP address
        from which connections will be accepted.
       </para>
       <para>
        If you set a value here (other than the default
        <literal>0.0.0.0</literal>) connections from all IP addresses other
        than the one specified are denied.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </step>
  </procedure>

  <procedure xml:id="run-java-connector-server">
   <title>Running the Java Connector Server</title>
   <step>
    <para>
     Start the Java Connector Server as follows:
    </para>
    <screen>$ <userinput>java \
 -cp "connector-framework.jar:connector-framework-internal.jar:groovy-all.jar" \
 org.identityconnectors.framework.server.Main \
 -run \
 -properties ./conf/connectorserver.properties</userinput></screen>
    <para>
     The connector server is now running, and listening on port 8759, by
     default.
    </para>
    <para>
     Log files are available in the <literal>/path/to/jconnsrv/logs</literal>
     directory.
    </para>
    <screen>$ <userinput>ls logs/</userinput>
<computeroutput>Connector.log  ConnectorServer.log  ConnectorServerTrace.log</computeroutput></screen>
    </step>
    <step>
     <para>
      If required, stop the Java Connector Server by pressing
      <literal>q</literal>.
     </para>
    </step>
   </procedure>

  <procedure xml:id="install-connectors-java">
   <title>Installing Connectors on a Java Connector Server</title>
   <para>
    When your Java Connector Server is up and running, you must install the
    individual connector bundles that will run on the Connector Server. This
    section assumes that your connector bundles are available as JAR files,
    either downloaded from the OpenICF download page, or bundled after their
    development.
   </para>
    <step>
     <para>
      Copy the connector bundle .jar to the <filename>bundles/</filename>
      folder.
     </para>
    </step>
    <step>
     <para>
      Add any required third-party .jar files to the <literal>lib/</literal>
      folder.
     </para>
    </step>
    <step>
     <para>
      Restart the Java Connector Server.
     </para>
    </step>
  </procedure>
 </section>

 <section xml:id="access-connector-server-ssl">
  <title>Accessing Connector Servers Over SSL</title>
  <para>
   In production environments, your application should access either the .NET
   or remote Java Connector Server over SSL.
  </para>
  <para>
   To configure secure access to the connector server, follow these steps:
  </para>
  <orderedlist>
   <listitem>
    <para>
     Configure the Connector Server to use an SSL certificate.
    </para>
    <para>
     Edit the <filename>ConnectorServer.properties</filename> file (in the
     <literal>/path/to/openicf/conf</literal> folder), to set
     <literal>connectorserver.usessl=true</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Configure the Connector Server to provide SSL sockets.
    </para>
   </listitem>
   <listitem>
    <para>
     Configure your application to communicate with the Connector Server over
     SSL.
    </para>
    <itemizedlist>
     <para>
      If you use self-signed or other certificates that Java cannot verify
      automatically, either import these certificates into the
      <filename>$JAVA_HOME/lib/security/cacerts</filename> directory, or use
      Java properties to specify your own, properly configured, truststore:
     </para>
     <listitem>
      <para>
       <option>-Djavax.net.ssl.trustStore=/path/to/myApp_cacerts</option>
      </para>
     </listitem>
     <listitem>
      <para>
       <option>-Djavax.net.ssl.trustStorePassword=changeit</option>
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </orderedlist>
 </section>

</chapter>
